spring.application.name=SpringBoot-13-ORM-Mapping-OneToOne

#how to connect to h2 database
#spring.datasource.url=jdbc:h2:mem:testdb
#spring.datasource.username=sa
#spring.datasource.password=
#spring.datasource.driver-class-name=org.h2.Driver
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#
##show query jpa runs in the background in console (not good for production)
#spring.jpa.show-sql=true
##url to access h2 db (localhost:8080/h2-console)
##In UI (localhost:8080/h2-console) add jdbc:h2:mem:testdb in JDBC URL input
#spring.h2.console.path=/h2-console
#spring.h2.console.enabled=true

#when we start to work with Postgres we comment out data above and add Postgres data below:
spring.datasource.url=jdbc:postgresql://localhost:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=admin

#to see sql code in console
spring.jpa.show-sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

#if you want to create tables hibernate way (from pojos)
#need to add @Entity and @Id annots. in pojos for hibernate way of table creation
#line below drops (deletes) existing table in db first and then creates it again
spring.jpa.hibernate.ddl-auto=create

#spring.jpa.hibernate.ddl-auto=update does not drop the table, adds new data on top of existing table
#in this case we can comment out spring.jpa.defer-datasource-initialization=true, and
# #spring.sql.init.mode=always, because existing table is not dropped by spring.jpa.hibernate.ddl-auto=create
#only new added on top already existing table
#spring.jpa.hibernate.ddl-auto=update
